(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{556:function(r,t,e){"use strict";e.r(t);var v=e(16),_=Object(v.a)({},(function(){var r=this,t=r._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[t("header-table"),r._v(" "),t("h1",{attrs:{id:"page-frontmatter-title"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#page-frontmatter-title"}},[r._v("#")]),r._v(" "+r._s(r.$page.frontmatter.title))]),r._v(" "),t("h2",{attrs:{id:"はじめに"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#はじめに"}},[r._v("#")]),r._v(" はじめに")]),r._v(" "),t("p",[r._v("Docker は、Docker, Incが開発しているコンテナ型の仮想環境プラットフォームです。\nコンテナとは仮想マシンのように1台のコンピュータの上で、仮想的に複数のアプリケーションを動作させる技術・仕組みの1つです。")]),r._v(" "),t("p",[r._v("Docker(コンテナ仮想化プラットフォーム)を使用すると、アプリケーションやその依存関係をコンテナと呼ばれる独立した環境にパッケージ化することができます。\nでは、コンテナと仮想マシンは何が異なるのでしょう？")]),r._v(" "),t("p",[r._v("一般的に、仮想マシンと呼ばれるソフトウェアでは、ホストOS上で仮想マシン用のソフトウェア（VirtualBox等）を動かすことでホストOSとは異なるOSを起動します。\n一方、コンテナによる仮想化は、ホストOS上にアプリケーション実行用の専用領域を作成し、その中で実行する仕組みとなっています。")]),r._v(" "),t("h3",{attrs:{id:"本講義の目的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本講義の目的"}},[r._v("#")]),r._v(" 本講義の目的")]),r._v(" "),t("ul",[t("li",[r._v("Dockerについて正しい基礎知識と理解を得る")]),r._v(" "),t("li",[r._v("DockerFile および dockerコマンドを用いてdocker containerを作成・操作できるようにする")])]),r._v(" "),t("h4",{attrs:{id:"本講義で扱わないこと"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本講義で扱わないこと"}},[r._v("#")]),r._v(" 本講義で扱わないこと")]),r._v(" "),t("ul",[t("li",[r._v("dockerコマンドのオプション・細かい操作に対する解説")]),r._v(" "),t("li",[r._v("コンテナイメージレイヤーの細かい解説")])]),r._v(" "),t("h3",{attrs:{id:"本講義の目標"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本講義の目標"}},[r._v("#")]),r._v(" 本講義の目標")]),r._v(" "),t("ul",[t("li",[r._v("dockerコマンドを利用してコンテナの取得・起動・停止ができるようになる")]),r._v(" "),t("li",[r._v("DockerFileの読み方・書き方を知り、自分で作成もしくは加筆修正するなど、自分の目的に沿ったコンテナを作成できるようになる")])]),r._v(" "),t("h3",{attrs:{id:"docker-とは"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-とは"}},[r._v("#")]),r._v(' "Docker" とは')]),r._v(" "),t("p",[t("strong",[r._v("はじめに")]),r._v(' で Docker = コンテナ型仮想環境プラットフォーム、として説明しましたが、本講義で扱う"Docker"は、コンテナ仮想プラットフォームを扱う上での技術的な概念やコマンド等を示します。')]),r._v(" "),t("p",[r._v("以下にDockerを扱う上で重要となる概念を記載します。")]),r._v(" "),t("ul",[t("li",[t("p",[r._v("Docker コンテナ")]),r._v(" "),t("ul",[t("li",[r._v("Dockerは、アプリケーションとその依存関係をコンテナと呼ばれる軽量な仮想環境にパッケージ化します。コンテナは、ホストマシンとは独立して実行され、一貫した動作を提供します。コンテナはポータブルであり、異なる環境やプラットフォームで実行できます。")])])]),r._v(" "),t("li",[t("p",[r._v("Docker イメージ")]),r._v(" "),t("ul",[t("li",[r._v("Dockerコンテナは、Dockerイメージから作成されます。イメージは、アプリケーションの実行に必要なすべての依存関係と設定を含むファイルシステムのスナップショットです。イメージは、"),t("strong",[r._v("Dockerfile")]),r._v("と呼ばれるテキストファイルに定義され、ビルドコマンドを使用して作成されます。")])])]),r._v(" "),t("li",[t("p",[r._v("コンテナオーケストレーション")]),r._v(" "),t("ul",[t("li",[r._v("Dockerは、コンテナのデプロイメントと管理を容易にするための機能を提供します。複数のコンテナを管理するためのツールとして、"),t("strong",[r._v("Docker Compose")]),r._v("や"),t("strong",[r._v("Kubernetes")]),r._v("(*)などがあります。これらのツールを使用すると、複雑なマルチコンテナ環境を構築し、スケーリングやロードバランシングなどの機能を実現することができます。")])])]),r._v(" "),t("li",[t("p",[r._v("イメージの共有")]),r._v(" "),t("ul",[t("li",[r._v("Docker HubやDocker Registryなどのオンラインリポジトリを使用することで、Dockerイメージを共有および配布することができます。これにより、他の開発者との協力や、既存のイメージを再利用することが容易になります。")])])])]),r._v(" "),t("p",[r._v("本講では主に仮想環境プラットフォームである「"),t("strong",[r._v("Docker コンテナ")]),r._v("」を中心に行いますが、一方で「"),t("strong",[r._v("Docker イメージ")]),r._v("」についても学び、自身にとって扱いやすい仮想環境プラットフォームを扱えることを目的と致します。")]),r._v(" "),t("p",[r._v("「"),t("strong",[r._v("コンテナオーケストレーション")]),r._v("」については続く docker-compose の項で扱います。")]),r._v(" "),t("h3",{attrs:{id:"講義の進め方"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#講義の進め方"}},[r._v("#")]),r._v(" 講義の進め方")]),r._v(" "),t("p",[r._v("本講義では、予めDockerがインストールされていることを前提としています。\nDockerのインストールが完了していない方は、「ハンズオン事前準備」を済ませてください。")]),r._v(" "),t("h2",{attrs:{id:"chapters"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#chapters"}},[r._v("#")]),r._v(" Chapters")]),r._v(" "),t("ul",[t("li",[t("RouterLink",{attrs:{to:"/development/docker/docker/GETSTART.html"}},[r._v("Dockerコンテナで仮想環境プラットフォームを構築する")])],1),r._v(" "),t("li",[t("RouterLink",{attrs:{to:"/development/docker/docker/RUN_AS_IMAGE.html"}},[r._v("Dockerコンテナイメージを作成して起動する")])],1),r._v(" "),t("li",[t("RouterLink",{attrs:{to:"/development/docker/docker/OPERATION.html"}},[r._v("Dockerコンテナの管理")])],1),r._v(" "),t("li",[t("RouterLink",{attrs:{to:"/development/docker/docker/BUILD.html"}},[r._v("Dockerイメージの作成")])],1)]),r._v(" "),t("h2",{attrs:{id:"参考"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[r._v("#")]),r._v(" 参考")]),r._v(" "),t("h3",{attrs:{id:"仮想マシン-vs-コンテナ"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#仮想マシン-vs-コンテナ"}},[r._v("#")]),r._v(" 仮想マシン vs コンテナ")]),r._v(" "),t("p",[r._v("仮想マシンとコンテナ、どちらが優れており、どちらを使うべきなのでしょう？")]),r._v(" "),t("p",[r._v("それは一概にどちらが優れているからそうすべき、といった類いの物ではありません。\nコンテナは仮想マシンと比べて後発であるため、仮想マシンが抱えていた問題を解決しているのは確かですが、上位互換という事ではありません。\nコンテナには仮想マシンには無いメリットもありますがデメリットもあります。\nコンテナは仮想マシンと異なり、OS の中で別のOSを起動するという事が無いため、セットアップや起動時においてもOSに関わる処理を必要としない為、時間を大幅に短縮することが可能です。また、ハードウェアにアクセスする際もゲストOSを介することが無いため、オーバーヘッドが少なく高速な動作が期待できます。")]),r._v(" "),t("p",[r._v("しかし、その一方で仮想マシンと比べてホストOSとの独立性が少ないため、ホストOSとアーキテクチャが大きく異なるコンテナを共存させることはできません。")]),r._v(" "),t("p",[r._v("例）Linux 上で Windows コンテナを起動・実行する")]),r._v(" "),t("h3",{attrs:{id:"docker-のアーキテクチャ"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-のアーキテクチャ"}},[r._v("#")]),r._v(" Docker のアーキテクチャ")]),r._v(" "),t("p",[t("img",{attrs:{src:"https://docs.docker.com/guides/images/docker-architecture.webp",alt:"Docker Image"}})]),r._v(" "),t("credit-footer")],1)}),[],!1,null,null,null);t.default=_.exports}}]);