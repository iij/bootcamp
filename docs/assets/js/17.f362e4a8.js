(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{224:function(e,a,n){"use strict";n.r(a);var s=n(0),t=Object(s.a)({},(function(){var e=this,a=e.$createElement,n=e._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("header-table"),e._v(" "),n("h1",{attrs:{id:"jqueryを触ってみよう"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jqueryを触ってみよう"}},[e._v("#")]),e._v(" jQueryを触ってみよう")]),e._v(" "),n("h2",{attrs:{id:"事前準備"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#事前準備"}},[e._v("#")]),e._v(" 事前準備")]),e._v(" "),n("p",[e._v("この講義ではコマンドライン（シェル）操作は必須ではありません。")]),e._v(" "),n("p",[e._v("このハンズオンでは、以下のような操作を行います。")]),e._v(" "),n("ul",[n("li",[e._v("手元で HTML, JavaScript ファイルを作成、編集する")]),e._v(" "),n("li",[e._v("その HTML ファイルをブラウザから以下のような URL で開く\n"),n("ul",[n("li",[e._v("file:///ローカルのパス/iij-bootcamp-jquery/index.html")])])]),e._v(" "),n("li",[e._v("ブラウザの開発者ツールでDOMツリーの表示、コンソールからの操作を行う")])]),e._v(" "),n("p",[e._v("これらの操作を行えればよいので、特別な準備は必要ありません。")]),e._v(" "),n("p",[e._v("ブラウザも自由ですが、最新版の Firefox または Chrome の利用を想定して解説する予定です。")]),e._v(" "),n("h2",{attrs:{id:"_1章：作業用ディレクトリを作成しよう"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1章：作業用ディレクトリを作成しよう"}},[e._v("#")]),e._v(" 1章：作業用ディレクトリを作成しよう")]),e._v(" "),n("p",[e._v("デスクトップ上でもどこでもよいので、次のようなディレクトリと以下のファイルを作成してください。")]),e._v(" "),n("h3",{attrs:{id:"ディレクトリ構造"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ディレクトリ構造"}},[e._v("#")]),e._v(" ディレクトリ構造")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("iij-bootcamp-jquery/\n├── index.html\n└── study.js\n")])])]),n("h3",{attrs:{id:"index-html-の中身"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#index-html-の中身"}},[e._v("#")]),e._v(" index.html の中身")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<!DOCTYPE html>\n<html lang="ja">\n<head>\n  <meta charset="utf-8" />\n  <title>iij-bootcamp jQuery</title>\n  <script src="https://code.jquery.com/jquery-3.4.1.js" integrity="sha256-WpOohJOqMqqyKL9FccASB9O0KwACQJpFTUBLTYOVvVU=" crossorigin="anonymous"><\/script>\n  <script src="study.js"><\/script>\n</head>\n<body>\n  <header id="page-header">\n    <h1 id="heading">Welcome to iij-bootcamp!</h1>\n    <p class="lead">JavaScriptと開発者ツールを使ってみよう！</p>\n    <p class="description">このハンズオンでは jQuery を使いながら、HTML, CSS, JavaScript とブラウザの開発者ツールの使い方を覚えていきます。</p>\n  </header>\n  <main id="page-main">\n    <p>1章：JavaScript を読み込む（開発者ツールのコンソールを確認しよう）</p>\n  </main>\n</body>\n</html>\n')])])]),n("h4",{attrs:{id:"study-js-の中身"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#study-js-の中身"}},[e._v("#")]),e._v(" study.js の中身")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("(function($) {\n  'use strict';\n\n  alert('study.js を呼び出した（コンソールを開いてください）');\n\n  console.log('console.log は開発者ツールのコンソール欄に出力される');\n  console.log(['apple', 'orange', 'peach'], 'hoge', 123, {'border': '1px solid red'}, 'console.log の引数は何個でも書ける');\n  console.log('jQuery のバージョンは %c%s%c です', 'color: red; background: #ff0;', $.fn.jquery, '');\n  console.log('object や function の値をデバッグ出力をしたいときに、console.log だと文字列になってしまう場合は console.dir を使う');\n  console.log($);\n  console.dir($);\n}(jQuery))\n")])])]),n("p",[e._v("ブラウザ上で開発者ツールを起動（表示）できたでしょうか。もしウィンドウの横に表示されている場合は、ウィンドウの下部に表示した方が良いかもしれません。開発者ツールを別ウィンドウで表示しても構いませんが、コンソールがある程度広く表示されるようにしておいてください。")]),e._v(" "),n("p",[e._v("コンソール出力の結果は、Chrome よりも Firefox の方が使いやすいかもしれません（Firefox では "),n("code",[e._v("console.log")]),e._v(" の出力結果が "),n("code",[e._v("console.dir")]),e._v(" と同じように扱えます）。")]),e._v(" "),n("p",[e._v("余談ですが "),n("code",[e._v("console.log")]),e._v(" はフォーマット指定に対応しています。第1引数に "),n("code",[e._v("%s")]),e._v(" など置換文字列を含む値を渡すと、他の言語でサポートされている "),n("code",[e._v("printf")]),e._v(" のように機能します。")]),e._v(" "),n("h3",{attrs:{id:"この講義での-html-と-js-について"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#この講義での-html-と-js-について"}},[e._v("#")]),e._v(" この講義での HTML と JS について")]),e._v(" "),n("p",[e._v("この講義では「DOM を操作してみる」「jQuery を使ってみる」ことを目的にしています。")]),e._v(" "),n("p",[e._v("JavaScript の文法やコーディングパターンを解説するつもりはありませんが、この資料では、筆者が適当にサンプルコードを書いて用意しています。")]),e._v(" "),n("ul",[n("li",[e._v("JavaScript ファイル冒頭の即時関数 "),n("code",[e._v("(function($) { ... }(jQuery))")]),e._v(" という書き方や "),n("code",[e._v("'use strict';")]),e._v(" は必須なものではありません。")]),e._v(" "),n("li",[e._v("以後のサンプルコードでは、変数宣言には "),n("code",[e._v("const")]),e._v(" や "),n("code",[e._v("let")]),e._v(" を使わず "),n("code",[e._v("var")]),e._v(" を使うことにします。")]),e._v(" "),n("li",[e._v("HTML は XHTML5 で記述し、HTML ファイル中では "),n("code",[e._v("study.js")]),e._v(" を body 要素の末尾ではなく head 要素内で読み込んでいます。このあたりは筆者の好みです。")]),e._v(" "),n("li",[e._v("ファイルの文字コードは UTF-8 を前提にしています。改行コードは指定していませんが CR+LF よりも LF を推奨します。")])]),e._v(" "),n("p",[e._v("講義では本筋ではないので説明を割愛しますが、こうした細かい部分の意味や違いについて気になった方は質問してもらっても構いません。")]),e._v(" "),n("h3",{attrs:{id:"_1章：まとめ"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1章：まとめ"}},[e._v("#")]),e._v(" 1章：まとめ")]),e._v(" "),n("p",[e._v("作成した index.html をブラウザで開いてみてください。")]),e._v(" "),n("p",[e._v("Firefox や Chrome を起動して、index.html ファイルをドラッグすれば "),n("code",[e._v("file:///ローカルのパス/iij-bootcamp-jquery/index.html")]),e._v(" のような URL でページが開かれると思います。")]),e._v(" "),n("p",[n("code",[e._v("alert")]),e._v(" によるポップアップが表示されれば成功です。ブラウザの開発者ツールを開いてみましょう。")]),e._v(" "),n("p",[e._v("開発者ツールは、Windows であれば "),n("code",[e._v("Ctrl + Shift + C")]),e._v("、Mac であれば "),n("code",[e._v("Command + Shift + C")]),e._v(" などでブラウザ内に表示されます。開発者ツールには、")]),e._v(" "),n("ul",[n("li",[e._v("「インスペクター(Elements)」")]),e._v(" "),n("li",[e._v("「コンソール(Console)」")]),e._v(" "),n("li",[e._v("「ネットワーク...」")])]),e._v(" "),n("p",[e._v("などのタブが表示されると思いますが、この講義では「インスペクター(Elements)」と「コンソール(Console)」しか使いません。")]),e._v(" "),n("p",[e._v("コンソールに "),n("code",[e._v("study.js")]),e._v(" で記述したデバッグ出力の内容が表示されていることが確認できたら、次の章に進みましょう。")]),e._v(" "),n("h2",{attrs:{id:"_2章：jquery-とは何か"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2章：jquery-とは何か"}},[e._v("#")]),e._v(" 2章：jQuery とは何か")]),e._v(" "),n("p",[e._v('jQuery（ジェイクエリー）です。"JQuery" でも "Jquery" でもありません。')]),e._v(" "),n("p",[e._v("2006年頃に登場した JavaScript のライブラリです。")]),e._v(" "),n("p",[e._v("フレームワークという言葉とライブラリという言葉の使い分けについて、一般のプログラミング言語がどうかはわかりませんが JavaScript ではあまり区別されていない印象があります。筆者の個人的な感覚では（MVC / MVVM 等の）Webアプリケーションを構築するための構造的な機能を提供しているものをフレームワークと呼び、それ以外はライブラリと呼ぶのが分かりやすいと思っています。ここでは jQuery はライブラリと呼ぶことにします。")]),e._v(" "),n("p",[e._v("現在では JavaScript の（MVC / MVVM 等の）フレームワークとして Angular や React, Vue.js が有名で、一昔前は Backbone.js や Underscore.js がありました（これ以外にもいくつもありますが）。")]),e._v(" "),n("ul",[n("li",[e._v("（MVC / MVVM 等の）フロントエンド Web アプリケーションフレームワーク\n"),n("ul",[n("li",[e._v("Angular, React, Vue.js")]),e._v(" "),n("li",[e._v("Backbone.js")])])]),e._v(" "),n("li",[e._v("ユーティリティ関数 / ヘルパー関数を提供するライブラリ\n"),n("ul",[n("li",[e._v("Underscore.js")])])]),e._v(" "),n("li",[e._v("DOM を操作する（DOM Manipulator）ライブラリ\n"),n("ul",[n("li",[e._v("jQuery")]),e._v(" "),n("li",[e._v("prototype.js")])])])]),e._v(" "),n("p",[e._v("jQuery は DOM Manipulator です。DOM を操作することを目的としたライブラリとして登場しました。また、jQuery ではユーティリティ関数もいくつか提供されています。")]),e._v(" "),n("p",[e._v("jQuery は React などのフレームワークとは目的が違うライブラリです。「2019年にもなって jQuery を使うのはどうなのか？」という発言を巷で見かけますが、jQuery を使うことが不適切だというわけではありません。")]),e._v(" "),n("p",[e._v("Webサイトを JavaScript を利用してWebアプリケーションとして構築したいというような場合には jQuery では力不足でしょう。そういう場面では Angular や React, Vue.js などのフレームワークを使うことを検討すべきかもしれません。")]),e._v(" "),n("p",[e._v("しかし、Webページにちょっとしたスクリプトを書いて処理をさせたい、DOM を操作したいというだけであれば、ライブラリとして jQuery を採用するのは選択肢として悪くない判断です。")]),e._v(" "),n("p",[e._v("現在ではネイティブの JavaScript DOM API の実装が充実してきているのでネイティブのメソッドだけでも比較的簡単にコードが書けますが、第二次ブラウザ戦争（詳しくは "),n("a",{attrs:{href:"/frontend/overview"}},[e._v("フロントエンド Overview")]),e._v(" の資料を参照）の時代以前はネイティブの API だけでは不便であったり、ブラウザ間で使える API に違いがあったりしました。")]),e._v(" "),n("p",[e._v("jQuery が登場したことで何が便利になったのかを理解するために、ブラウザがコンテンツを表示するまでの仕組みと DOM について確認していきましょう。")]),e._v(" "),n("h2",{attrs:{id:"_3章：dom-とは何か"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3章：dom-とは何か"}},[e._v("#")]),e._v(" 3章：DOM とは何か")]),e._v(" "),n("p",[e._v("DOM（ドム）とは、Document Object Model の略で、HTML で表現されているデータを、ブラウザ内部で表現するためのデータモデルです。ツリー構造で表現されるため DOM ツリーと呼ばれることもあります。")]),e._v(" "),n("p",[e._v("普段、Webブラウザで表示しているページは HTML ソースコードでできている「HTML ページ」です。")]),e._v(" "),n("p",[e._v("ブラウザは、HTML ソースコードを受け取ると、次のような順序で処理を行ってコンテンツを逐次表示しています。")]),e._v(" "),n("ul",[n("li",[e._v("(1) HTML ソースコードの解析（パース）を開始する。")]),e._v(" "),n("li",[e._v("(2) 解析した順に DOM ツリーを構築する。")]),e._v(" "),n("li",[e._v("(3) 画像や CSS, JS ファイルなどリソース読み込みをするものがあれば、そのリソースの取得を開始する。")]),e._v(" "),n("li",[e._v("(4) 同期読み込みリソースであれば、読み込みが完了するまで HTML の解析処理を止める。非同期読み込みリソースであれば、HTML の解析を進めながらリソースの読み込みを行う。\n"),n("ul",[n("li",[e._v("リソースの読み込みが完了したら、CSS や JS であればスタイルの適用、スクリプトの実行を行う。画像であれば表示処理を行う。")])])]),e._v(" "),n("li",[e._v("(5) HTML ソースコードを最後まで解析したら、DOM の構築を完了する。")]),e._v(" "),n("li",[e._v("(6) HTML ソースコードにあるリソースの取得が全て完了したら、ページの読み込みを完了する。")])]),e._v(" "),n("p",[e._v("次の HTML を例に見ていきましょう。")]),e._v(" "),n("h3",{attrs:{id:"index-html-を書いてみる"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#index-html-を書いてみる"}},[e._v("#")]),e._v(" index.html を書いてみる")]),e._v(" "),n("p",[e._v("index.html に以下の内容を書いてみてください。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<!DOCTYPE html>\n<html lang="ja">\n<head>\n  <meta charset="utf-8" />\n  <title>What is DOM?</title>\n  <script src="https://code.jquery.com/jquery-3.4.1.js" integrity="sha256-WpOohJOqMqqyKL9FccASB9O0KwACQJpFTUBLTYOVvVU=" crossorigin="anonymous"><\/script>\n</head>\n<body>\n  <ul class="animals">\n    <li class="alice"><img src="https://placekitten.com/300/150" alt="Alice" /></li>\n    <li class="bob"><img src="https://placekitten.com/300/160" alt="Bob" /></li>\n    <li class="carol"><img src="https://placekitten.com/300/180" alt="Carol" /></li>\n  </ul>\n  <script src="study.js"><\/script>\n  <p class="message">Cats are Cute!</p>\n</body>\n</html>\n')])])]),n("p",[e._v("このような HTML があったとき、最終的には次のような DOM ツリーが構築されます。")]),e._v(" "),n("p",[e._v("ツリーであるというのは、ある要素（ノード）が唯一の親を持つような、親子関係があるということです。DOM ツリーの頂点は常に Document というノードになり、その下に HTML の要素が DOM としてぶらさがっています。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('[Document]\n  └ [HTML]{lang: "ja"}\n      ├ [HEAD]\n      │  ├ [META]{charset: "utf-8"}\n      │  ├ [TITLE]\n      │  │  └ (TEXT) "What is DOM?"\n      │  └ [SCRIPT]{src: ".../jquery-3.4.1.js", ...}\n      └ [BODY]\n          ├ [UL]{class: "animals"}\n          │  ├ [LI]{class: "alice"}\n          │  │  └ [IMG]{src: ".../300/150", alt: "Alice"}\n          │  ├ [LI]{class: "bob"}\n          │  │  └ [IMG]{src: ".../300/160", alt: "Bob"}\n          │  └ [LI]{class: "carol"}\n          │      └ [IMG]{src: ".../300/180", alt: "Carol"}\n          ├ [SCRIPT]{src: "study.js"}\n          └ [P]{class: "message"}\n              └ (TEXT) "Cats are Cute!"\n')])])]),n("p",[e._v("上記の HTML では、"),n("code",[e._v("study.js")]),e._v(" の記述位置を "),n("code",[e._v("ul")]),e._v(" 要素の後に書いています。")]),e._v(" "),n("h3",{attrs:{id:"study-js-を書いてみる"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#study-js-を書いてみる"}},[e._v("#")]),e._v(" study.js を書いてみる")]),e._v(" "),n("p",[e._v("この HTML の情報を "),n("code",[e._v("study.js")]),e._v(" から取得してみましょう。JavaScript では DOM API メソッドを用いて、構築された DOM ツリーにアクセスすることができます。")]),e._v(" "),n("p",[e._v("試しに、2つの簡単な処理を行ってみます。")]),e._v(" "),n("ul",[n("li",[e._v("animals_info 関数\n"),n("ul",[n("li",[n("code",[e._v('class="animals"')]),e._v(" である "),n("code",[e._v("ul")]),e._v(" 要素に含まれるリストアイテムの数を出力する")])])]),e._v(" "),n("li",[e._v("message_info 関数\n"),n("ul",[n("li",[n("code",[e._v('class="message"')]),e._v(" である要素のテキストを出力する")])])])]),e._v(" "),n("p",[n("code",[e._v("class 属性値")]),e._v(" にマッチする要素は1個であるという前提で以下のようなコードを書いてみます。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("(function() {\n  'use strict';\n\n  section3_works();\n\n  function section3_works() {\n    console.log(animals_info());\n    console.log(message_info());\n\n    function animals_info() {\n      var ul = document.getElementsByClassName('animals')[0];\n      if (ul == null) return 'class=\"animals\" の要素が見つかりません';\n      var li_elems = ul.getElementsByTagName('li');\n      if (li_elems == null) return 'li 要素が見つかりません';\n      return '動物の画像は ' + li_elems.length + ' 枚あります';\n    }\n\n    function message_info() {\n      var p = document.getElementsByClassName('message')[0];\n      if (p == null) return 'class=\"message\" の要素が見つかりません';\n      return 'メッセージは \"' + p.textContent + '\" です';\n    }\n  }\n}());\n")])])]),n("p",[e._v("この状態で index.html をブラウザで表示して、コンソールを開くと何が出力されるでしょうか。")]),e._v(" "),n("h3",{attrs:{id:"_3章：まとめ"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3章：まとめ"}},[e._v("#")]),e._v(" 3章：まとめ")]),e._v(" "),n("p",[e._v("コンソールには、")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('動物の画像は 3 枚あります\nclass="message" の要素が見つかりません\n')])])]),n("p",[e._v("と表示されるはずです。"),n("code",[e._v("animals_info")]),e._v(" の方は期待通り動きましたが、"),n("code",[e._v("message_info")]),e._v(" の方はメッセージを取得することに失敗してしまいました。")]),e._v(" "),n("p",[e._v("この原因と仕組みを次の章で確認していきます。")]),e._v(" "),n("h2",{attrs:{id:"_4章：イベント処理とは何か"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4章：イベント処理とは何か"}},[e._v("#")]),e._v(" 4章：イベント処理とは何か")]),e._v(" "),n("p",[e._v("3章の study.js では、メッセージの取得に失敗してしまいました。"),n("code",[e._v('class="message"')]),e._v(" の綴りを間違えたりしているわけでもありません。")]),e._v(" "),n("p",[e._v("もう一度、ブラウザの内部処理の流れを確認してみましょう。")]),e._v(" "),n("ul",[n("li",[e._v("(1) HTML ソースコードの解析（パース）を開始する。")]),e._v(" "),n("li",[e._v("(2) 解析した順に DOM ツリーを構築する。")]),e._v(" "),n("li",[e._v("(3) 画像や CSS, JS ファイルなどリソース読み込みをするものがあれば、そのリソースの取得を開始する。")]),e._v(" "),n("li",[e._v("(4) 同期読み込みリソースであれば、読み込みが完了するまで HTML の解析処理を止める。非同期読み込みリソースであれば、HTML の解析を進めながらリソースの読み込みを行う。\n"),n("ul",[n("li",[e._v("リソースの読み込みが完了したら、CSS や JS であればスタイルの適用、スクリプトの実行を行う。画像であれば表示処理を行う。")])])]),e._v(" "),n("li",[e._v("(5) HTML ソースコードを最後まで解析したら、DOM の構築を完了する。")]),e._v(" "),n("li",[e._v("(6) HTML ソースコードにあるリソースの取得が全て完了したら、ページの読み込みを完了する。")])]),e._v(" "),n("p",[e._v("この (2) の動作がここでは重要です。3章で書いた HTML では、"),n("code",[e._v('<script src="study.js"><\/script>')]),e._v(" を記述している箇所が "),n("code",[e._v('<p class="message">Cats are Cute!</p>')]),e._v(" よりも手前です。")]),e._v(" "),n("p",[e._v("つまり、study.js のリソースを取得して実行したタイミングでは、DOM ツリーには "),n("code",[e._v('<p class="message">Cats are Cute!</p>')]),e._v(" が追加されていません。"),n("code",[e._v('<script src="study.js"><\/script>')]),e._v(" の解析をした時点で構築できている DOM ツリーを対象に処理を実行したため、それ以前に構築が済んでいる "),n("code",[e._v('<ul class="animals">')]),e._v(" の DOM にはアクセスできたものの、まだ存在しない "),n("code",[e._v('<p class="message">')]),e._v(" の要素にはアクセスできないという状況が生じてしまいました。")]),e._v(" "),n("h3",{attrs:{id:"どうすればよかったのか？"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#どうすればよかったのか？"}},[e._v("#")]),e._v(" どうすればよかったのか？")]),e._v(" "),n("p",[e._v("DOM が構築されてからスクリプトを実行したいので、"),n("code",[e._v("body")]),e._v(" 要素の末尾に "),n("code",[e._v("<script>")]),e._v(" タグを書けばよい、という考えることができます。")]),e._v(" "),n("p",[e._v("この方法でも前述の問題は回避できますが、"),n("code",[e._v("body")]),e._v(" の末尾で script を読み込む方法はデメリットが生じるケースがあります。JavaScript では、DOM の操作以外の処理を行うこともあります。例えば、ページ内リンクをスムーススクロールにしたり、ウィンドウ幅に応じてスタイルや "),n("code",[e._v("class 属性値")]),e._v(" を動的に書き換えるといった処理をしたり、アクセス解析をしたり、様々な処理を行う可能性があります。")]),e._v(" "),n("p",[e._v("スクリプト自体の読み込みが遅いと、スクリプトがページ表示前に実行したい処理が始まるまでに時間がかかってしまい、HTML（DOM）が表示された後で処理が開始するためチラツキが生じたり、スクリプト側でイベントリスナーの実行タイミングをコントロールできなくなってしまったりします。")]),e._v(" "),n("p",[e._v("このため、基本的には "),n("code",[e._v("head")]),e._v(" 要素の中で CSS や JavaScript ファイルを読み込むことが推奨されたりもしています。"),n("code",[e._v('<script src="study.js"><\/script>')]),e._v(" を手前の方に書きつつ "),n("code",[e._v('<p class="message">')]),e._v(" の要素にアクセスできるようにする方法は、次のセクションで説明します。")]),e._v(" "),n("h3",{attrs:{id:"イベント処理という仕組み"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#イベント処理という仕組み"}},[e._v("#")]),e._v(" イベント処理という仕組み")]),e._v(" "),n("p",[e._v("先程までは、"),n("code",[e._v('<script src="study.js"><\/script>')]),e._v(" を読み込んだら処理を「即時実行する」という書き方しかしていませんでした。")]),e._v(" "),n("p",[e._v("イベント処理を使うと、「あるイベントが発生したら、処理を実行する」というような「処理の予約」を行うことができます。")]),e._v(" "),n("p",[e._v("つまり、「DOMの構築が完了したら、処理を実行する」という予約を行っておけば、"),n("code",[e._v('<script src="study.js"><\/script>')]),e._v(" を手前の方に書きつつ "),n("code",[e._v('<p class="message">')]),e._v(" の要素にアクセスすることを実現できます。")]),e._v(" "),n("h3",{attrs:{id:"_4章：まとめ"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4章：まとめ"}},[e._v("#")]),e._v(" 4章：まとめ")]),e._v(" "),n("p",[e._v("3章で書いた study.js の "),n("code",[e._v("section3_works();")]),e._v(" の呼び出し部分を、次のように書き換えてみてください。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("(function() {\n  'use strict';\n\n  document.addEventListener('DOMContentLoaded', function() {\n    section3_works();\n  }, false);\n\n  function section3_works() {\n    console.log(animals_info());\n    console.log(message_info());\n\n    function animals_info() {\n      var ul = document.getElementsByClassName('animals')[0];\n      if (ul == null) return 'class=\"animals\" の要素が見つかりません';\n      var li_elems = ul.getElementsByTagName('li');\n      if (li_elems == null) return 'li 要素が見つかりません';\n      return '動物の画像は ' + li_elems.length + ' 枚あります';\n    }\n\n    function message_info() {\n      var p = document.getElementsByClassName('message')[0];\n      if (p == null) return 'class=\"message\" の要素が見つかりません';\n      return 'メッセージは \"' + p.textContent + '\" です';\n    }\n  }\n}());\n")])])]),n("p",[n("code",[e._v("DOMContentLoaded")]),e._v(" というのが、「DOMの構築が完了したタイミング」の予約イベントです。")]),e._v(" "),n("p",[e._v("イベント処理の予約（イベントリスナーの追加）は、イベントの発生対象ノードに対して "),n("code",[e._v("addEventListener")]),e._v(" メソッドを呼ぶことによって予約することができます。このイベントは特定の要素ノードの話ではないので "),n("code",[e._v("document")]),e._v(" ノードに対して予約します。")]),e._v(" "),n("p",[e._v("index.html の中身は3章のままですが、index.html を表示すると「メッセージ」もコンソールに表示されると思います。")]),e._v(" "),n("h2",{attrs:{id:"_5章：jquery-は何が便利だったのか"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5章：jquery-は何が便利だったのか"}},[e._v("#")]),e._v(" 5章：jQuery は何が便利だったのか")]),e._v(" "),n("p",[e._v("4章までの説明では jQuery を一切使っていません。jQuery は何が便利なのでしょうか。")]),e._v(" "),n("p",[e._v("その答えをいくつか書いてみます。")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("DOMContentLoaded")]),e._v(" というイベントは HTML5 の仕様で導入された。IE8 以前ではサポートされていない。")]),e._v(" "),n("li",[e._v("IE8 以前では、そもそも "),n("code",[e._v("addEventListener")]),e._v(" というメソッドすらサポートされていない。")]),e._v(" "),n("li",[e._v("ネイティブの DOM API では、複数の要素と単数の要素を区別して扱う必要がある（先程のコードでも "),n("code",[e._v("getElements...()[0]")]),e._v(" のようにリストの1つ目を取り出して使っていた）。")]),e._v(" "),n("li",[e._v("その他、ネイティブの DOM API では要素の作成、追加、削除、属性の変更などのメソッドが貧弱で、DOM API 用の独自ライブラリを各自で書いて使っていた。")]),e._v(" "),n("li",[e._v("第二次ブラウザ戦争の時代に、それらの問題を解決する「DOM Manipulator ライブラリ」として登場したのが2005年の prototype.js, 2006年の jQuery だった。")]),e._v(" "),n("li",[e._v("jQuery は（ネイティブの DOM API の抽象化だけでなく）便利なメソッドが沢山実装されているため、jQuery さえあれば JavaScript でやりたいことが（簡単に）実現できる強力なライブラリとして広まった。")])]),e._v(" "),n("p",[e._v("IE6 〜 IE8 が多くの人に使われていた時代に「DOM の構築が完了したタイミング」の予約イベントを追加したいと思ったとき、一体どんなコードを書けばよいか想像できるでしょうか。この機能は jQuery の機能の一部に過ぎません。")]),e._v(" "),n("p",[e._v("また、要素ノードの取得やノードに対するメソッド操作も、ネイティブの DOM API と比べると使いやすいものでした。当時は "),n("code",[e._v("getElementById")]),e._v(" や "),n("code",[e._v("getElementsByTagName")]),e._v(" メソッドを用いて要素を取得する必要があり、CSS のセレクタのように表現力の高い要素の指定ができませんでした（"),n("code",[e._v("getElementsByClassName")]),e._v(" メソッドすらサポートされておらずこれが使えませんでした）。")]),e._v(" "),n("p",[e._v("そのような時代（2009年頃）に「今」と同じくらいの DOM 操作が可能な API を実現したのが jQuery だったのです。当時としては jQuery は画期的なライブラリであり、jQuery UI なども登場することで JavaScript 開発のデファクトスタンダードとなっていきました。")]),e._v(" "),n("h2",{attrs:{id:"_6章：dom-を操作してみよう"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6章：dom-を操作してみよう"}},[e._v("#")]),e._v(" 6章：DOM を操作してみよう")]),e._v(" "),n("p",[e._v("jQuery のメソッドをいくつか使ってみましょう。")]),e._v(" "),n("p",[e._v("index.html は以下のものにしておき、study.js で色々なコードを書いていきましょう。")]),e._v(" "),n("h3",{attrs:{id:"index-html"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#index-html"}},[e._v("#")]),e._v(" index.html")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<!DOCTYPE html>\n<html lang="ja">\n<head>\n  <meta charset="utf-8" />\n  <title>iij-bootcamp jQuery</title>\n  <script src="https://code.jquery.com/jquery-3.4.1.js" integrity="sha256-WpOohJOqMqqyKL9FccASB9O0KwACQJpFTUBLTYOVvVU=" crossorigin="anonymous"><\/script>\n  <script src="study.js"><\/script>\n</head>\n<body>\n  <header id="page-header">\n    <h1 id="heading">Welcome to iij-bootcamp!</h1>\n    <p class="lead">JavaScriptと開発者ツールを使ってみよう！</p>\n    <p class="description">このハンズオンでは jQuery を使いながら、HTML, CSS, JavaScript とブラウザの開発者ツールの使い方を覚えていきます。</p>\n  </header>\n  <main id="page-main">\n    <p class="description">jQuery で DOM を操作してみよう！</p>\n    <ul class="animals">\n      <li class="alice"><img src="https://placekitten.com/300/150" alt="Alice" /></li>\n      <li class="bob"><img src="https://placekitten.com/300/160" alt="Bob" /></li>\n      <li class="carol"><img src="https://placekitten.com/300/180" alt="Carol" /></li>\n    </ul>\n  </main>\n</body>\n</html>\n')])])]),n("h3",{attrs:{id:"練習1-study-js"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#練習1-study-js"}},[e._v("#")]),e._v(" 練習1 - study.js")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("(function($) {\n  'use strict';\n\n  $(function() {\n    work1();\n  });\n\n  work2();\n\n  function work1() {\n    console.log('==== work1 が実行されました ====');\n    // $() メソッドに CSS のセレクタを与えると、それにマッチする要素を取得します\n    var $desc = $('.description');\n    console.log('class=\"description\" の要素は %d 個ありました', $desc.length)\n  }\n\n  function work2() {\n    console.log('==== work2 が実行されました ====');\n    var $desc = $('.description');\n    console.log('class=\"description\" の要素は %d 個ありました', $desc.length)\n  }\n}(jQuery));\n")])])]),n("p",[n("code",[e._v("work2")]),e._v(" の方が先に実行されると思います。この study.js を読んで、そのことが理解できるでしょうか。そして、work2 が実行されたタイミングでは DOM ツリーの構築が完了していないため、「そのタイミング」までで構築されたノードしか参照できません。まだ "),n("code",[e._v('class="description"')]),e._v(" の要素ノードが DOM ツリーに入っていないので "),n("code",[e._v("work2")]),e._v(" では「0個」と表示されます。")]),e._v(" "),n("p",[n("code",[e._v("work1")]),e._v(" が実行されるのは「DOMの構築が完了したタイミング」です。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("document.addEventListener('DOMContentLoaded', function() {\n  // ここにコードを書く\n}, false);\n")])])]),n("p",[e._v("このようなコードと同等の動作を、jQuery では次のように書くことができます。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("$(function() {\n  // ここにコードを書く\n});\n")])])]),n("p",[e._v("たまに jQuery で、")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("$(document).ready(function() {\n  // ここにコードを書く\n});\n")])])]),n("p",[e._v("のような書き方を説明している記事などを見かけますが、これらは同じ動作をします。"),n("code",[e._v("$")]),e._v(" という1文字の変数は "),n("code",[e._v("jQuery")]),e._v(" の別名です。"),n("code",[e._v("$(document).ready(function() {...})")]),e._v(" の簡略記法が "),n("code",[e._v("$(function() {...})")]),e._v(" です。")]),e._v(" "),n("h3",{attrs:{id:"練習2-study-js"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#練習2-study-js"}},[e._v("#")]),e._v(" 練習2 - study.js")]),e._v(" "),n("p",[e._v("html はそのままで、study.js を別のものにしてみます。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("(function($) {\n  'use strict';\n\n  $(function() {\n    work1();\n  });\n\n  function work1() {\n    var $main = $('#page-main');\n\n    var $desc1 = $('.description');\n    // 実際に $desc1 としてどの要素がマッチして取得できたのかをコンソールに出力します\n    console.log('desc1 の状態', $desc1);\n\n    // $desc1 に含まれる全ての要素に、赤文字を適用します\n    $desc1.css({'color': '#f00'});\n\n    var $desc2 = $('#page-main .description');\n    console.log('desc2 の状態', $desc2);\n    // $desc2 に含まれる全ての要素に、黄色背景、黒い枠線を適用します\n    $desc2.css({'background': '#ff0', 'border': '1px solid #000'});\n\n    add_paragraph();\n    // 関数にして、変数のスコープ（影響範囲）が関数内だけになるようにしています\n    function add_paragraph() {\n      // $() メソッドに CSS セレクタではなくタグ文字列を与えると、要素の取得ではなく、新しい要素の生成が行われます。\n      // これは $(document.createElememt('p')) と等価です。\n\n      var $p = $('<p>').addClass('new_p');\n      $p.addClass('hogehoge'); // さらにクラスを追加\n      $p.text('こんにちは！').css({'background': '#0f0'});\n\n      // メソッドチェーンがサポートされているので、上記は\n      // $('<p>').addClass('new_p').addClass('hogehoge').text('こんにちは！');\n      // のようにも書けます。\n\n      // $main の中の末尾に $p を追加（移動）します。これで $p は DOM ツリーに追加されます。\n      $main.append($p);\n    }\n\n    // 3000 ミリ秒後（3秒後）に add_images() を実行します\n    setTimeout(function() {\n      add_image();\n    }, 3000);\n\n    function add_image() {\n      var $animals = $('.animals');\n      var $li = $('<li>');\n      var $img = $('<img>').attr({\n        src: 'https://placeimg.com/300/300/nature',\n        alt: 'a random nature image'\n      }).appendTo($li);\n\n      // class=\"bob\" はもともと HTML に出力されている「2個目の li 要素」です\n      var $bob = $animals.find('.bob');\n\n      // $bob の直前に $li を追加（移動）します。\n      $bob.before($li);\n    }\n  }\n}(jQuery));\n")])])]),n("p",[e._v("練習2では、要素の取得、属性の変更（style 属性）、要素の追加を試してみました。")]),e._v(" "),n("p",[e._v("関連する jQuery メソッドを紹介しておきます。")]),e._v(" "),n("ul",[n("li",[e._v("要素の取得\n"),n("ul",[n("li",[n("code",[e._v("$('#page-main')")]),e._v(", "),n("code",[e._v("$('#page-main .description')")]),e._v(" "),n("ul",[n("li",[e._v("DOM ツリーの "),n("code",[e._v("document")]),e._v(" 以下に含まれる全てのノードから、セレクタにマッチする要素を取得します。")])])]),e._v(" "),n("li",[n("code",[e._v("var $main = $('#page-main'); $main.find('.description')")]),e._v(" "),n("ul",[n("li",[e._v("すでに取得している要素に含まれる、子孫要素を "),n("code",[e._v("find")]),e._v(" メソッドで取得できます。")]),e._v(" "),n("li",[n("code",[e._v("$('セレクタ')")]),e._v(" は "),n("code",[e._v("$(document).find('セレクタ')")]),e._v(" の簡略記法です。")])])])])]),e._v(" "),n("li",[e._v("要素の追加\n"),n("ul",[n("li",[n("code",[e._v("$main.before($new_p)")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("$main")]),e._v(" の直前に "),n("code",[e._v("$new_p")]),e._v(" を追加")]),e._v(" "),n("li",[n("code",[e._v("$new_p.insertBefore($main)")]),e._v(" でも同じ結果になる")])])]),e._v(" "),n("li",[n("code",[e._v("$main.prepend($new_p)")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("$main")]),e._v(" の先頭の子供として "),n("code",[e._v("$new_p")]),e._v(" を追加")]),e._v(" "),n("li",[n("code",[e._v("$new_p.prependTo($main)")]),e._v(" でも同じ")])])]),e._v(" "),n("li",[n("code",[e._v("$main.append($new_p)")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("$main")]),e._v(" の末尾の子供として "),n("code",[e._v("$new_p")]),e._v(" を追加")]),e._v(" "),n("li",[n("code",[e._v("$new_p.appendTo($main)")]),e._v(" でも同じ")])])]),e._v(" "),n("li",[n("code",[e._v("$main.after($new_p)")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("$main")]),e._v(" の直後に "),n("code",[e._v("$new_p")]),e._v(" を追加")]),e._v(" "),n("li",[n("code",[e._v("$new_p.insertAfter($main)")]),e._v(" でも同じ結果になる")])])])])]),e._v(" "),n("li",[e._v("要素の削除\n"),n("ul",[n("li",[n("code",[e._v("$new_p.remove()")]),e._v(" "),n("ul",[n("li",[e._v("DOM ツリーから "),n("code",[e._v("$new_p")]),e._v(" を取り除く")]),e._v(" "),n("li",[e._v("DOM ツリーにないノードでも JavaScript 側で操作することができ、再度 DOM ツリーに追加し直すこともできる。\n"),n("ul",[n("li",[e._v("新しい要素を "),n("code",[e._v("$('<p>')")]),e._v(" のように作成したけれど DOM ツリーに追加していない状態のそれと同じ扱い。")]),e._v(" "),n("li",[e._v("あくまで DOM ツリーに含まれていないだけで、JavaScript 上では存在している。")])])])])]),e._v(" "),n("li",[n("code",[e._v("$new_p.detach()")]),e._v(" "),n("ul",[n("li",[e._v("DOM ツリーからノードを削除したい場合、通常は "),n("code",[e._v("remove()")]),e._v(" を使えばよい。")]),e._v(" "),n("li",[e._v("イベント処理の予約（例えばクリックイベントなど）を登録した要素を DOM ツリーから取り除き、その後で取り除いた要素を再度 DOM ツリーに戻すような場合、"),n("code",[e._v("remove")]),e._v(" と "),n("code",[e._v("detach")]),e._v(" で挙動が変わる。\n"),n("ul",[n("li",[n("code",[e._v("remove")]),e._v(" で取り除くと、登録していたイベントリスナーが全て削除される。")]),e._v(" "),n("li",[n("code",[e._v("detach")]),e._v(" で取り除くと、登録していたイベントリスナーは保持される。")])])])])])])])]),e._v(" "),n("p",[e._v("要素の追加（移動）のメソッドについて。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<body>\n  \x3c!-- $main.before() はここ --\x3e\n  <main>\n    \x3c!-- $main.prepend() はここ --\x3e\n    <ul class="animals">\n      ...\n    </ul>\n    \x3c!-- $main.append() はここ --\x3e\n  </main>\n  \x3c!-- $main.after() はここ --\x3e\n</body>\n')])])]),n("p",[e._v("また上記では「追加」と書いていますが、正確には「移動」です。つまり、"),n("code",[e._v("$main.append($new_p)")]),e._v(" の後で "),n("code",[e._v("$another.append($new_p)")]),e._v(" のようなことをすると、"),n("code",[e._v("$main")]),e._v(" に "),n("code",[e._v("append")]),e._v(" した "),n("code",[e._v("$new_p")]),e._v(" は移動するので "),n("code",[e._v("$main")]),e._v(" の子ノードからは消えたかのように振舞います。")]),e._v(" "),n("p",[e._v("同じ要素を次々と「量産」したいような場合は、"),n("code",[e._v("clone")]),e._v(" メソッドを使います。")]),e._v(" "),n("p",[n("code",[e._v("$main.before($new_p.clone(true))")]),e._v(" と "),n("code",[e._v("$main.after($new_p.clone(true))")]),e._v(" を実行すると、before と after にそれぞれ新しい "),n("code",[e._v("$new_p")]),e._v(" のクローンが追加されます。"),n("code",[e._v("clone")]),e._v(" メソッドを実行した時点で "),n("code",[e._v("$new_p")]),e._v(" とは別の実体が生成されます。（"),n("code",[e._v("clone")]),e._v(" の引数 "),n("code",[e._v("true")]),e._v(" の意味は "),n("code",[e._v("remove")]),e._v(" と "),n("code",[e._v("detach")]),e._v(" の違いに似ています。"),n("code",[e._v("true")]),e._v(" にするとイベント登録内容も引き継がれます。）")]),e._v(" "),n("h3",{attrs:{id:"_6章：まとめ"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6章：まとめ"}},[e._v("#")]),e._v(" 6章：まとめ")]),e._v(" "),n("p",[e._v("jQuery で DOM を操作してみました。")]),e._v(" "),n("p",[e._v("jQuery では上記に書いた "),n("code",[e._v("find")]),e._v(" などのメソッドが使えますが、これらのメソッドは "),n("code",[e._v("jQuery オブジェクト")]),e._v(" に定義されているメソッドです。")]),e._v(" "),n("ul",[n("li",[e._v("jQuery API\n"),n("ul",[n("li",[n("a",{attrs:{href:"https://api.jquery.com/category/manipulation/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://api.jquery.com/category/manipulation/"),n("OutboundLink")],1)])])]),e._v(" "),n("li",[e._v("jQuery 1.9 日本語リファレンス（非公式）\n"),n("ul",[n("li",[n("a",{attrs:{href:"http://js.studio-kingdom.com/jquery/",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://js.studio-kingdom.com/jquery/"),n("OutboundLink")],1)])])])]),e._v(" "),n("p",[e._v("jQuery の最新版は 3.4.x ですが、個人的な感覚では API はバージョン 1.6 くらいから安定しているので 1.9 のドキュメントでも十分参考になると思います。")]),e._v(" "),n("p",[e._v("jQuery の変数（オブジェクト）について。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("var p = document.getElementsByTagName('p')[0];\nvar $p = $(p);\n// これは $p = $('p').eq(0) と等価です。\n\n// $p は、ネイティブのノード p を jQuery インスタンスでラップしたオブジェクトです。\n// $p.eq(0) は、$p に含まれる要素が複数ある場合に、インデックス[0]の値だけを取り出すメソッドです。\nvar $ul = $('.animals');\nvar $li = $ul.find('li');\n// このようにすれば、インデックス[1]（つまり2個目）の li 要素（jQuery オブジェクト）を取り出せます。\nconsole.log($li.eq(1));\n\n// $li.eq(k) ではインデックス[k]の要素を jQuery オブジェクトとして取り出しますが、\n// $li.get(k) ではインデックス[k]の要素をネイティブのノードとして取り出します。\nconsole.log($p.get(0));\n\n// p == $p.get(0) であり、 $p == $(p) == $($p.get(0)) です\n")])])]),n("p",[e._v("一般的にはあまり推奨されませんが、jQuery を使った JavaScript コードでは（システム）ハンガリアン記法がしばしば採用されます。jQuery オブジェクトを保持する変数は "),n("code",[e._v("$p")]),e._v(" のように変数名を "),n("code",[e._v("$")]),e._v(" から始めるというものです。これは好みの問題なので変数名はどのように書いても構いません。")]),e._v(" "),n("h2",{attrs:{id:"おわりに"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#おわりに"}},[e._v("#")]),e._v(" おわりに")]),e._v(" "),n("p",[e._v("今回は DOM 操作以外のテーマについてあまり触れられませんでした。")]),e._v(" "),n("ul",[n("li",[e._v("DOM 操作")]),e._v(" "),n("li",[e._v("スクロール制御（ページ内リンクのスムーススクロール）")]),e._v(" "),n("li",[e._v("jQuery アニメーション（フェード、スライドショー、イージング）")]),e._v(" "),n("li",[e._v("Ajax 通信（ajax メソッド、load メソッド）")])]),e._v(" "),n("p",[e._v("jQuery は DOM Manipulator ライブラリであり、DOM 操作を中心に上記のような応用をする際には有用なライブラリです。")]),e._v(" "),n("p",[e._v("一方で、途中でも述べましたが Angular や React, Vue.js は JavaScript ベースの Web アプリケーションを開発する際に有用なフレームワークです。それらの使い方は jQuery とは目的が異なるため、「Vue.js と jQuery のどちらを使うべきか」という単純な比較はあまり意味がありません。")]),e._v(" "),n("p",[e._v("また、最近では IE6 〜 IE8 のような古いブラウザを考慮する必要がなくなったため、jQuery を使わずともネイティブの JavaScript メソッドや HTML5, CSS3 の時代に使えるようになった機能を用いることで、ブラウザごとの実装状況や不具合に悩まされずに JavaScript 開発ができるようになってきました。")]),e._v(" "),n("p",[e._v("ブラウザ戦争の歴史や JavaScript の歴史を知ると、どういう JavaScript フレームワークがなぜ便利で、どのような場面で使うべきなのかというのを判断できるようになるかもしれません。そのような歴史や背景についても興味を持っていただけたら幸いです。")]),e._v(" "),n("credit-footer")],1)}),[],!1,null,null,null);a.default=t.exports}}]);